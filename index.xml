<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Concourse </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://concourse.github.io/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Tue, 01 Jan 2008 00:00:00 UTC</updated>
    
    <item>
      <title>What &amp; Why</title>
      <link>https://concourse.github.io/basics/what-and-why</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>https://concourse.github.io/basics/what-and-why</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;What &amp;amp; Why&lt;/h1&gt;

&lt;p&gt;There are countless CI options out there. Transitioning from one CI
infrastructure to another can be a huge investment.&lt;/p&gt;

&lt;p&gt;Why should you care about Concourse?&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Easy to learn&lt;/h2&gt;

&lt;p&gt;All of Concourse builds on the following primitives:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;resource&lt;/dt&gt;
    &lt;dd&gt;
      A resource is any entity that can be checked for new versions, pulled
      down at a specific version, and/or pushed up to generate new versions. A
      common example would be a git repository.
    &lt;/dd&gt;

  &lt;dt&gt;job&lt;/dt&gt;
    &lt;dd&gt;
      A job is a predefined configuration for builds that will be executed. It
      has inputs and outputs, and typically executes when any of its input
      resources change.
    &lt;/dd&gt;

  &lt;dt&gt;build&lt;/dt&gt;
    &lt;dd&gt;
      A build is an execution of some program in a container. Before starting,
      all of its input resources are fetched, and upon the program&#39;s successful
      completion, all of its outputs are performed.
    &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Like files and pipes in Unix, Concourse aims to build an expressive system with
as few distinct moving parts as possible.&lt;/p&gt;

&lt;p&gt;Of course, there&amp;rsquo;s a bit more to it than that. Head on over to
&lt;a href=&#34;/concepts&#34;&gt;Concepts&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Reproducible&lt;/h2&gt;

&lt;p&gt;Concourse does not require a wizard to configure. It is designed to be
statically configurable via a single file, that is no larger than it has to be.
When your Concourse deployment burns down, it doesn&amp;rsquo;t matter. Deploy it again
somewhere else, in the exact same configuration.&lt;/p&gt;

&lt;p&gt;An entire arbitrarily complicated pipeline can be declared in a single
human-readable config file, and you&amp;rsquo;ll &lt;em&gt;like it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With BOSH, deploying a Concourse cluster is easy regardless of the size of the
cluster. Scaling up to handle higher workloads is as trivial as bumping the
Turbine instance count.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Unintrusive&lt;/h2&gt;

&lt;p&gt;Concourse is optimized for quickly navigating to the pages you most care about.
From the main page, the shortest path from a pipeline view to the console
output of a job&amp;rsquo;s latest failing build is a single click.&lt;/p&gt;

&lt;p&gt;From there, the job&amp;rsquo;s entire build history is displayed, and every input for
the job is listed out, with any new inputs highlighted.&lt;/p&gt;

&lt;p&gt;Console output has colors highlighted and supports unicode. It emulates your
terminal and gets out of your way.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Build isolation&lt;/h2&gt;

&lt;p&gt;Every build is run in a container, completely isolated from other builds.&lt;/p&gt;

&lt;p&gt;Never worry about other teams clobbering your finely tuned global state. Never
again wipe down your worker agents after weeks of use.&lt;/p&gt;

&lt;p&gt;The base image for each job&amp;rsquo;s builds is configurable, and supports Docker
images. Control your build&amp;rsquo;s runtime environment as part of your project that
needs it, not your worker VMs.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Local iteration&lt;/h2&gt;

&lt;p&gt;Everyone knows this dance: set up CI, push, build fails. Fix config, push,
build fails&amp;hellip; 20 commits later, success.&lt;/p&gt;

&lt;p&gt;Concourse&amp;rsquo;s support for running builds locally eliminates this pesky workflow,
and allows you to trust that your build running locally runs &lt;em&gt;exactly&lt;/em&gt; the same
way that it runs in your CI system.&lt;/p&gt;

&lt;p&gt;The workflow then becomes: set up CI, configure build locally, &lt;code&gt;fly&lt;/code&gt;, build
fails (we can&amp;rsquo;t fix that), fix things up, &lt;code&gt;fly&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;At the end of this, instead of 20 junk commits pushed to your repo, you&amp;rsquo;ve
figured out a configuration for both running locally and running in CI.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Bootstrapped&lt;/h2&gt;

&lt;p&gt;Proving all of this works is hard without having a real use case. Thankfully,
Concourse itself is a sufficiently large piece of work that its own pipeline
has been plenty to cut its teeth on.&lt;/p&gt;

&lt;p&gt;At the start of the pipeline are jobs configured for each individual component.
These jobs simply run their unit tests, and are the first line of defense.&lt;/p&gt;

&lt;p&gt;The versions of each component that make it through this stage are then fed
into an integration job that literally spins every component up in a room and
makes them talk to each other.&lt;/p&gt;

&lt;p&gt;From there, the Docker images used for the resource types within the
integration build are shipped, and the ref of each successful resource is
bumped in the BOSH release repository.&lt;/p&gt;

&lt;p&gt;Because the release repo changed, a Deploy job kicks in, which literally
&lt;em&gt;deploys to the same instance running the Deploy job&lt;/em&gt;. Concourse&amp;rsquo;s own
pipeline drives out the need for deploys to not trash every running build.&lt;/p&gt;

&lt;p&gt;After a deploy succeeds, the Concourse version number resource is bumped, and
new artifacts are available for shipping into a new release.&lt;/p&gt;

&lt;p&gt;At any point in time, I can walk in and trigger the &lt;code&gt;shipit&lt;/code&gt; job, which takes
the most recently built release candidate, bumps its version resource to a
final number (&lt;code&gt;0.3.0.rc.3&lt;/code&gt; to &lt;code&gt;0.3.0&lt;/code&gt;), and uploads a &lt;code&gt;.tgz&lt;/code&gt; to the S3 bucket
containing final releases.&lt;/p&gt;

&lt;p&gt;Though the above chain of events may sound complicated, in reality it is just a
bunch of simple functions of inputs &amp;rarr; outputs.&lt;/p&gt;

&lt;p&gt;The way I&amp;rsquo;ve described this pipeline flow is precisely how each job is
configured, and automatically visualized on the main page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/images/concourse-pipeline.png&#34;&gt;&lt;img class=&#34;pipeline&#34; src=&#34;/images/concourse-pipeline.png&#34; alt=&#34;Concourse Pipeline&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially this array of squares may be a lot to take in, but on your own
projects, where &lt;em&gt;reality&lt;/em&gt; is this complicated, you&amp;rsquo;ll appreciate the
straightforward expression of every relationship.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://concourse.github.io/concepts/resources</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>https://concourse.github.io/concepts/resources</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Resources&lt;/h1&gt;

&lt;p&gt;At the center of everything is a resource. A resource is any entity that can be
versioned. This means it can be checked for new versions from some cursor,
pulled down at some specific version, and/or pushed up to some destination.&lt;/p&gt;

&lt;p&gt;A resource type is technically defined as three simple scripts, corresponding
to these three actions: &lt;code&gt;check&lt;/code&gt;, for checking for new versions, &lt;code&gt;in&lt;/code&gt; for
fetching a resource and placing it into a container, and &lt;code&gt;out&lt;/code&gt; for performing
an output.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;git&lt;/code&gt; resource can be summed up as:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;check&lt;/dt&gt;
    &lt;dd&gt;&lt;code&gt;git pull &amp;&amp; git log [cursor]..HEAD&lt;/code&gt;&lt;/dd&gt;
  
  &lt;dt&gt;in&lt;/dt&gt;
    &lt;dd&gt;&lt;code&gt;git clone &amp;&amp; git checkout [version]&lt;/code&gt;&lt;/dd&gt;
  
  &lt;dt&gt;out&lt;/dt&gt;
    &lt;dd&gt;&lt;code&gt;git push origin somebranch&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;At its core, Concourse knows nothing about Git. Instead, all Concourse knows is
the interface of a resource &lt;em&gt;type&lt;/em&gt;. This is immensely powerful, as it does not
limit Concourse to whatever things its authors thought to allow users to
integrate with. Instead. everything is provided in user-land, and anyone using
Concourse is free to implement their own.&lt;/p&gt;

&lt;p&gt;With this set of primitives you can model any pipeline, from simple
(unit/integration &amp;rarr; deploy &amp;rarr; ship) to complex (testing on multiple
infrastructures, etc.). There are no more nooks and crannies of Concourse
introduced as your pipeline becomes more complicated; the provided primitives
should be enough.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Anatomy of a Resource Type&lt;/h2&gt;

&lt;p&gt;Resource types are implemented by containers that have three simple scripts:&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;&lt;code&gt;/opt/resource/check&lt;/code&gt;: Check for new versions.&lt;/h3&gt;

&lt;p&gt;A resource type&amp;rsquo;s &lt;code&gt;/check&lt;/code&gt; script is invoked to detect new versions of the
resource. It is given the configured source and current version on stdin, and
must print the array of new versions, in chronological order, to stdout.&lt;/p&gt;

&lt;p&gt;Note that the current version will be missing if this is the first time the
resource has been used. In this case, the script should emit only the most
recent version, &lt;em&gt;not&lt;/em&gt; every version since the resource&amp;rsquo;s inception.&lt;/p&gt;

&lt;p&gt;For example, here&amp;rsquo;s what the input for a &lt;code&gt;git&lt;/code&gt; resource may look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;branch&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;develop&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;private_key&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;61cebfdb274da579de4287347967b580d02d31e3&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the output, assuming &lt;code&gt;d74e01...&lt;/code&gt; is the commit immediately after &lt;code&gt;61cbef&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;d74e0124818939e857f503734fdb0e7ea5f3b20c&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;7154febfa9b398361dcbd56566a161c35e7c5186&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The list may be empty, if the given version is already the latest.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;&lt;code&gt;/opt/resource/in&lt;/code&gt;: Fetch a given resource.&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;/in&lt;/code&gt; script is passed a destination directory as &lt;code&gt;$1&lt;/code&gt;, and is given on
stdin the configured source and, optionally, a precise version of the resource
to fetch.&lt;/p&gt;

&lt;p&gt;The script must fetch the resource and place it in the given directory.&lt;/p&gt;

&lt;p&gt;Because the input may not specify a version, the &lt;code&gt;/in&lt;/code&gt; script must print out
the version that it fetched. This allows the upstream to not have to perform
&lt;code&gt;/check&lt;/code&gt; before &lt;code&gt;/in&lt;/code&gt;, which can be slow (for git it implies two clones).&lt;/p&gt;

&lt;p&gt;Additionally, the script may emit metadata as a list of key-value pairs. This
data is intended for public consumption and will make it upstream, intended to
be shown on the build&amp;rsquo;s page.&lt;/p&gt;

&lt;p&gt;Example input, in this case for the &lt;code&gt;git&lt;/code&gt; resource:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;branch&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;develop&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;private_key&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;61cebfdb274da579de4287347967b580d02d31e3&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;version&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example output:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;61cebfdb274da579de4287347967b580d02d31e3&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;61cebfdb274da579de4287347967b580d02d31e3&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hulk Hogan&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;&lt;code&gt;/opt/resource/out&lt;/code&gt;: Update a resource.&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;/out&lt;/code&gt; script is called with a path to the directory containing the build&amp;rsquo;s
full set of sources as the first argument, and is given on stdin the configured
params and the resource&amp;rsquo;s source information. The source directory is as it was
at the end of the build.&lt;/p&gt;

&lt;p&gt;The script must emit the resulting version of the resource. For example, the
&lt;code&gt;git&lt;/code&gt; resource emits the sha of the commit that it just pushed.&lt;/p&gt;

&lt;p&gt;Additionally, the script may emit metadata as a list of key-value pairs. This
data is intended for public consumption and will make it upstream, intended to
be shown on the build&amp;rsquo;s page.&lt;/p&gt;

&lt;p&gt;Example input, in this case for the &lt;code&gt;git&lt;/code&gt; resource:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;branch&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;develop&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;git@...&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;private_key&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Example output:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;61cebfdb274da579de4287347967b580d02d31e3&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;61cebfdb274da579de4287347967b580d02d31e3&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Mick Foley&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://concourse.github.io/basics/getting-started</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>https://concourse.github.io/basics/getting-started</guid>
      <description>&lt;p&gt;BOSH.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jobs</title>
      <link>https://concourse.github.io/concepts/jobs</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      
      <guid>https://concourse.github.io/concepts/jobs</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Jobs&lt;/h1&gt;

&lt;p&gt;A job is a static configuration that describes how builds will be executed. A
job declares inputs and outputs.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Inputs&lt;/h2&gt;

&lt;p&gt;A job&amp;rsquo;s inputs are all resources, and when new versions are detected for any of
them, a build of the job is created.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what a job configured to run unit tests will often look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana-unit&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana/build.yml&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This job will continuously monitor &lt;code&gt;banana&lt;/code&gt; for new versions, automatically
triggering builds of them when they are found.&lt;/p&gt;

&lt;p&gt;The build that is executed is configured via &lt;code&gt;build.yml&lt;/code&gt; in the fetched
&lt;code&gt;banana&lt;/code&gt; resource. This is a common pattern: resources that contain unit tests
should configure their tests in their own repo.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Outputs&lt;/h2&gt;

&lt;p&gt;When a build succeeds, all of its input versioned resources are implicitly
recorded as outputs of the job.&lt;/p&gt;

&lt;p&gt;A job may however configure explicit outputs, which add to the output set,
overriding the implicit versions.&lt;/p&gt;

&lt;p&gt;For example, a job may pull in a repo that contains a &lt;code&gt;Dockerfile&lt;/code&gt;, and push a
Docker image when its tests go green:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana-image&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana/unit.yml&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana-image&lt;/span&gt;
    &lt;span class=&#34;l-Scalar-Plain&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;l-Scalar-Plain&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;banana&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When builds complete, all outputs are executed in parallel (as they should have
no inter-relationships). If any outputs fail to execute, the build errors
(overriding the otherwise successful status).&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Depending on other job&amp;rsquo;s outputs&lt;/h3&gt;

&lt;p&gt;It is often useful to have a single version of a resource propagate through a
&amp;lsquo;pipeline&amp;rsquo;, with the guarantee that the same tested version is making its way
through.&lt;/p&gt;

&lt;p&gt;This is done by adding a &lt;code&gt;passed:&lt;/code&gt; constraint to a job&amp;rsquo;s inputs, like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;This applies to any number of inputs. What&amp;#39;s more, inputs whose constraints&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;specify the same job are guaranteed to come from the same build of the job.&lt;/span&gt;

&lt;span class=&#34;l-Scalar-Plain&#34;&gt;A more complicated example&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;

&lt;span class=&#34;l-Scalar-Plain&#34;&gt;&amp;lt;div class=&amp;quot;highlight&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&#34;l-Scalar-Plain&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;shipit&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;mything/shipit.yml&lt;/span&gt;
&lt;span class=&#34;l-Scalar-Plain&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;l-Scalar-Plain&#34;&gt;passed&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p-Indicator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a-unit&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;integration&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;l-Scalar-Plain&#34;&gt;passed&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p-Indicator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b-unit&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;integration&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;version&lt;/span&gt;
    &lt;span class=&#34;l-Scalar-Plain&#34;&gt;passed&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p-Indicator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;integration&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above configuration guarantees that the &lt;code&gt;shipit&lt;/code&gt; job will only trigger with
versions of &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;version&lt;/code&gt; that have passed &lt;code&gt;integration&lt;/code&gt; together,
with the same version of &lt;code&gt;a&lt;/code&gt; passing &lt;code&gt;a-unit&lt;/code&gt; and the same version of &lt;code&gt;b&lt;/code&gt;
passing &lt;code&gt;b-unit&lt;/code&gt;. This is a very succinct way to provide &amp;ldquo;fan-in&amp;rdquo; at the end of
more involved pipelines, where everything comes together and must be correlated
again.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>